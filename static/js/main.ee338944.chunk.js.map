{"version":3,"sources":["store/article.js","components/footer/index.js","components/navigatior/index.js","utils/ErrorBoundary.js","app/App.js","app/routes.js","serviceWorker.js","store/news.js","app/store.js","index.js"],"names":["articleSlice","createSlice","name","initialState","list","loading","reducers","fetch","state","payload","concat","actions","Footer","to","Navigatior","ErrorBoundary","props","error","errorInfo","this","setState","children","Component","App","routers","fallback","exact","path","component","lazy","className","Boolean","window","location","hostname","match","title","author","content","combineReducers","article","news","configureStore","reducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2FAAA,8CAEMA,EAAeC,YAAY,CAC/BC,KAAM,UACNC,aAAc,CACZC,KAAM,GACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,SAACC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACfD,EAAMJ,KAAOI,EAAMJ,KAAKM,OAAOD,OAKtBF,EAAUP,EAAaW,QAAvBJ,MAEAP,MAAf,S,0OCbe,SAASY,IACtB,OACE,gCACE,4BACE,wCACA,4BAAI,kBAAC,IAAD,CAAMC,GAAG,SAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAEN,4BACE,uCACA,yDACA,iD,MCXO,SAASC,IAEtB,OACE,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMD,GAAG,SAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,Y,oCCRSE,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,gBACKR,MAAQ,CACXS,MAAO,KACPC,UAAW,MAJI,E,qDAYnB,SAAkBD,EAAOC,GACvBC,KAAKC,SAAS,CACZH,MAAOA,EACPC,UAAWA,M,oBAIf,WACE,OAAIC,KAAKX,MAAMU,UAEN,qDAEFC,KAAKH,MAAMK,Y,uCAhBpB,SAAgCJ,Q,GATSK,aCoB5BC,MAdf,WACE,IAAMC,ECDJ,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,CAAC,IAAK,SAAUC,UAAWC,gBAAK,kBAAM,kCACzD,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWC,gBAAK,kBAAM,kCAC3C,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWC,gBAAK,kBAAM,oCDFnD,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,KACGN,GAEH,kBAAC,EAAD,Q,QELcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BChBSlC,cAAY,CACzBC,KAAM,OACNC,aAAc,CACZC,KAAM,CAAC,CACLgC,MAAO,QACPC,OAAQ,OACRC,QAAS,iBAGbhC,SAAU,CACRC,MAAO,SAACC,EAAOJ,GACbI,EAAMJ,KAAOI,EAAMJ,KAAKM,OAAON,OCT/BE,EAAWiC,YAAgB,CAC/BC,YACAC,SAGaC,cAAe,CAC5BC,QAASrC,ICFXsC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLwC,QAAQxC,MAAMA,EAAMyC,c","file":"static/js/main.ee338944.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst articleSlice = createSlice({\r\n  name: 'article',\r\n  initialState: {\r\n    list: [],\r\n    loading: false\r\n  },\r\n  reducers: {\r\n    fetch: (state, { payload }) => {\r\n      state.list = state.list.concat(payload)\r\n    }\r\n  }\r\n});\r\n\r\nexport const { fetch } = articleSlice.actions\r\n\r\nexport default articleSlice.reducer;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Footer.scss';\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer>\r\n      <ul>\r\n        <li>Site Map</li>\r\n        <li><Link to=\"/home\">Home</Link></li>\r\n        <li><Link to=\"/about\">About</Link></li>\r\n      </ul>\r\n      <ul>\r\n        <li>Contact</li>\r\n        <li>email: xxxxxx@hotmail.com</li>\r\n        <li>phone: xxxxxxxx</li>\r\n      </ul>\r\n    </footer>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navigatior.scss';\r\n\r\nexport default function Navigatior() {\r\n\r\n  return (\r\n    <nav>\r\n      <ul>\r\n        <li><Link to=\"/home\">Home</Link></li>\r\n        <li><Link to=\"/about\">About</Link></li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n","import React, { Component } from \"react\"\r\n\r\nexport default class ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      error: null,\r\n      errorInfo: null\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // log error\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorInfo) {\r\n      // You can render any custom fallback UI\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n    return this.props.children; \r\n  }\r\n}\r\n","import React from 'react';\r\nimport createRoutes from './routes';\r\nimport './App.css';\r\nimport Footer from '../components/footer';\r\nimport Navigatior from '../components/navigatior';\r\nimport ErrorBoundary from '../utils/ErrorBoundary';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  const routers = createRoutes();\r\n  return (\r\n    <Router>\r\n      <div className=\"bg\"></div>\r\n      <Navigatior></Navigatior>\r\n      <ErrorBoundary>\r\n        {routers}\r\n      </ErrorBoundary>\r\n      <Footer></Footer>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { Suspense, lazy } from 'react';\r\nimport {\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nexport default function createRoutes() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Switch>\r\n        <Route exact path={['/', '/home']} component={lazy(() => import('../containers/home'))} />\r\n        <Route path=\"/about\" component={lazy(() => import('../containers/about'))} />\r\n        <Route path=\"/article\" component={lazy(() => import('../containers/article'))} />\r\n      </Switch>\r\n    </Suspense>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport default createSlice({\r\n  name: 'news',\r\n  initialState: {\r\n    list: [{\r\n      title: 'news1',\r\n      author: 'news',\r\n      content: 'hello news.'\r\n    }]\r\n  },\r\n  reducers: {\r\n    fetch: (state, list) => {\r\n      state.list = state.list.concat(list);\r\n    }\r\n  }\r\n})\r\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\r\nimport article from '../store/article';\r\nimport news from '../store/news';\r\n\r\nconst reducers = combineReducers({\r\n  article,\r\n  news\r\n});\r\n\r\nexport default configureStore({\r\n  reducer: reducers\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App2 from './app/App';\r\nimport { Provider } from 'react-redux'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './app/store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App2 />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}