{"version":3,"sources":["store/article.js","components/footer/index.js","components/navigatior/index.js","utils/ErrorBoundary.js","app/App.js","app/routes.js","serviceWorker.js","store/news.js","app/store.js","index.js"],"names":["articleSlice","createSlice","name","initialState","list","title","author","content","reducers","fetch","state","payload","concat","actions","Footer","Navigatior","useState","x","setX","y","setY","useEffect","console","log","onClick","ErrorBoundary","props","error","errorInfo","this","setState","children","Component","App","routers","fallback","exact","path","component","lazy","class","Boolean","window","location","hostname","match","combineReducers","article","news","configureStore","reducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2FAAA,6CAEMA,EAAeC,YAAY,CAC/BC,KAAM,UACNC,aAAc,CACZC,KAAM,CAAC,CACLC,MAAO,eACPC,OAAQ,eACRC,QAAS,iDAGbC,SAAU,CACRC,MAAO,SAACC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACfD,EAAMN,KAAOM,EAAMN,KAAKQ,OAAOD,OAKtBF,EAAUT,EAAaa,QAAvBJ,MAEAT,MAAf,S,uOCjBe,SAASc,IACtB,OACE,gCACE,8B,kBCHS,SAASC,IAEtB,MAAkBC,mBAAS,GAA3B,mBAAOC,EAAP,KAAUC,EAAV,KACA,EAAkBF,mBAAS,GAA3B,mBAAOG,EAAP,KAAUC,EAAV,KAMA,OAJAC,qBAAU,WACRC,QAAQC,IAAIN,EAAGE,KACd,CAACF,EAAGE,IAGL,6BACE,4BACE,wBAAIK,QAAS,kBAAMN,EAAKD,EAAE,KAA1B,QACA,wBAAIO,QAAS,kBAAMJ,EAAKD,EAAE,KAA1B,W,oCCdaM,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,gBACKhB,MAAQ,CACXiB,MAAO,KACPC,UAAW,MAJI,E,qDAYnB,SAAkBD,EAAOC,GACvBC,KAAKC,SAAS,CACZH,MAAOA,EACPC,UAAWA,M,oBAIf,WACE,OAAIC,KAAKnB,MAAMkB,UAEN,qDAEFC,KAAKH,MAAMK,Y,uCAhBpB,SAAgCJ,Q,GATSK,aCoB5BC,MAdf,WACE,IAAMC,ECAJ,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,CAAC,IAAK,SAAUC,UAAWC,gBAAK,kBAAM,kCACzD,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWC,gBAAK,kBAAM,qCDHnD,OACE,oCACE,yBAAKC,MAAM,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,KACGN,GAEH,kBAAC,EAAD,Q,QELcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BChBS5C,cAAY,CACzBC,KAAM,OACNC,aAAc,CACZC,KAAM,CAAC,CACLC,MAAO,QACPC,OAAQ,OACRC,QAAS,iBAGbC,SAAU,CACRC,MAAO,SAACC,EAAON,GACbM,EAAMN,KAAOM,EAAMN,KAAKQ,OAAOR,OCT/BI,EAAWsC,YAAgB,CAC/BC,YACAC,SAGaC,cAAe,CAC5BC,QAAS1C,ICFX2C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLL,QAAQK,MAAMA,EAAMqC,c","file":"static/js/main.6f1855a4.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst articleSlice = createSlice({\n  name: 'article',\n  initialState: {\n    list: [{\n      title: '标题',\n      author: '作者',\n      content: '这是文章的标题.'\n    }]\n  },\n  reducers: {\n    fetch: (state, { payload }) => {\n      state.list = state.list.concat(payload)\n    }\n  }\n});\n\nexport const { fetch } = articleSlice.actions\n\nexport default articleSlice.reducer;\n","import React from 'react';\nimport './Footer.scss';\n\nexport default function Footer() {\n  return (\n    <footer>\n      <ul>\n      </ul>\n    </footer>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport './Navigatior.scss';\n\nexport default function Navigatior() {\n\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n\n  useEffect(() => {\n    console.log(x, y);\n  }, [x, y]);\n\n  return (\n    <nav>\n      <ul>\n        <li onClick={() => setX(x+1)}>Home</li>\n        <li onClick={() => setY(y+1)}>About</li>\n      </ul>\n    </nav>\n  )\n}\n","import React, { Component } from \"react\"\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      error: null,\n      errorInfo: null\n    }\n  }\n\n  static getDerivedStateFromError(error) {\n    // log error\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children; \n  }\n}\n","import React from 'react';\n\nimport createRoutes from './routes';\nimport './App.css';\nimport Footer from '../components/footer';\nimport Navigatior from '../components/navigatior';\nimport ErrorBoundary from '../utils/ErrorBoundary';\n\nfunction App() {\n  const routers = createRoutes();\n  return (\n    <>\n      <div class=\"bg\"></div>\n      <Navigatior></Navigatior>\n      <ErrorBoundary>\n        {routers}\n      </ErrorBoundary>\n      <Footer></Footer>\n    </>\n  );\n}\n\nexport default App;\n","import React, { Suspense, lazy } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nexport default function createRoutes() {\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <Route exact path={['/', '/home']} component={lazy(() => import('../containers/home'))} />\n          <Route path=\"/about\" component={lazy(() => import('../containers/about'))} />\n        </Switch>\n      </Suspense>\n    </Router>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport default createSlice({\n  name: 'news',\n  initialState: {\n    list: [{\n      title: 'news1',\n      author: 'news',\n      content: 'hello news.'\n    }]\n  },\n  reducers: {\n    fetch: (state, list) => {\n      state.list = state.list.concat(list);\n    }\n  }\n})\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport article from '../store/article';\nimport news from '../store/news';\n\nconst reducers = combineReducers({\n  article,\n  news\n});\n\nexport default configureStore({\n  reducer: reducers\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App2 from './app/App';\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport store from './app/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App2 />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}